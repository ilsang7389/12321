package ex2;

import org.springframework.aop.framework.ProxyFactoryBean;
import org.springframework.aop.support.DefaultPointcutAdvisor;
import org.springframework.aop.support.NameMatchMethodPointcut;

public class MessageMain {
	public static void main(String[] args) {
		//allJoinpoint();
		usePointCut();
	}

	private static void usePointCut() {
		ProxyFactoryBean pfBean = new ProxyFactoryBean();
		//Target 객체의 정보를 ProxyFactoryBean 저장
		pfBean.setTarget(new MesseageImple());
		//Advice를 적용
		// pfBean.addAdviec(new Ex1_MessageAdvice());
		// PointCut 이란 정규 표현식 등을 사용해서, Advice를 적용할 대상을 선택하고자 할 떄 사용함
		// pointcut을 사용해서 test로 시작하는 메서드만 joinpoint로 설정하겠다.
		NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();
		// Target이 가지고 있는 메서드 이름을 선별할 수 있다.
		pointcut.setMappedName("print*");
		// Advice와 pointcut의 결합 => Advisors
		pfBean.addAdvisor(new DefaultPointcutAdvisor(pointcut, new MessageAdvice2()<()));
		Message prMessage = (Message) pfBean.getObject();
		prMessage.printtest();
	}

	private static void allJoinpoint() {
		//AOP의 Advice와 Target의 관계를 관리해주는 객체이다.
		ProxyFactoryBean pfBean = new ProxyFactoryBean();
		//Target 객체의 정보를 ProxyFactoryBean 저장
		pfBean.setTarget(new MesseageImple());
		//Advice를 적용
		pfBean.addAdvice(new Ex1_MessageAdvice());
		// 요청해보기
		Message prMessage = (Message) pfBean.getObject();
		//prMessage.test2();
		prMessage.printtest();
	}
}
